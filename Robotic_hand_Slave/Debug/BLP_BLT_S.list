
BLP_BLT_S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003910  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a48  08003a48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a48  08003a48  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a48  08003a48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08003a5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003a5c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e702  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204f  00000000  00000000  0002e737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00030788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00031520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001805c  00000000  00000000  000321f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010587  00000000  00000000  0004a24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e96b  00000000  00000000  0005a7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e913e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c0  00000000  00000000  000e9190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a04 	.word	0x08003a04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003a04 	.word	0x08003a04

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc93 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f889 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa7d 	bl	8000658 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015e:	f000 f8d5 	bl	800030c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000162:	f000 f921 	bl	80003a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000166:	f000 f9d7 	bl	8000518 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800016a:	f000 fa4b 	bl	8000604 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

    int pozycjaX = 150;
 800016e:	2396      	movs	r3, #150	; 0x96
 8000170:	60fb      	str	r3, [r7, #12]
    int pozycjaY = 150;
 8000172:	2396      	movs	r3, #150	; 0x96
 8000174:	60bb      	str	r3, [r7, #8]
    int zmiana = 5;
 8000176:	2305      	movs	r3, #5
 8000178:	607b      	str	r3, [r7, #4]

    HAL_UART_Receive_IT(&huart3, RX_BUFFER, BUFFER_LEN);
 800017a:	2201      	movs	r2, #1
 800017c:	4937      	ldr	r1, [pc, #220]	; (800025c <main+0x110>)
 800017e:	4838      	ldr	r0, [pc, #224]	; (8000260 <main+0x114>)
 8000180:	f002 fed5 	bl	8002f2e <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000184:	2100      	movs	r1, #0
 8000186:	4837      	ldr	r0, [pc, #220]	; (8000264 <main+0x118>)
 8000188:	f002 f8b4 	bl	80022f4 <HAL_TIM_PWM_Start_IT>
	  	  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 800018c:	2104      	movs	r1, #4
 800018e:	4835      	ldr	r0, [pc, #212]	; (8000264 <main+0x118>)
 8000190:	f002 f8b0 	bl	80022f4 <HAL_TIM_PWM_Start_IT>
	  	  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 8000194:	2108      	movs	r1, #8
 8000196:	4833      	ldr	r0, [pc, #204]	; (8000264 <main+0x118>)
 8000198:	f002 f8ac 	bl	80022f4 <HAL_TIM_PWM_Start_IT>
	  	  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800019c:	2100      	movs	r1, #0
 800019e:	4832      	ldr	r0, [pc, #200]	; (8000268 <main+0x11c>)
 80001a0:	f002 f8a8 	bl	80022f4 <HAL_TIM_PWM_Start_IT>

	  	HAL_UART_Receive_IT(&huart3, RX_BUFFER, BUFFER_LEN);
 80001a4:	2201      	movs	r2, #1
 80001a6:	492d      	ldr	r1, [pc, #180]	; (800025c <main+0x110>)
 80001a8:	482d      	ldr	r0, [pc, #180]	; (8000260 <main+0x114>)
 80001aa:	f002 fec0 	bl	8002f2e <HAL_UART_Receive_IT>

	  	if(RX_BUFFER[0] == '1'){
 80001ae:	4b2b      	ldr	r3, [pc, #172]	; (800025c <main+0x110>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	2b31      	cmp	r3, #49	; 0x31
 80001b4:	d10b      	bne.n	80001ce <main+0x82>
	  		pozycjaX = pozycjaX - zmiana;
 80001b6:	68fa      	ldr	r2, [r7, #12]
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	1ad3      	subs	r3, r2, r3
 80001bc:	60fb      	str	r3, [r7, #12]
	  		if(pozycjaX < 50){
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	2b31      	cmp	r3, #49	; 0x31
 80001c2:	dc01      	bgt.n	80001c8 <main+0x7c>
	  			pozycjaX = 50;
 80001c4:	2332      	movs	r3, #50	; 0x32
 80001c6:	60fb      	str	r3, [r7, #12]
	  			}
	  		HAL_Delay(100);
 80001c8:	2064      	movs	r0, #100	; 0x64
 80001ca:	f000 fcb9 	bl	8000b40 <HAL_Delay>
	  		}

	  	if(RX_BUFFER[0] == '2'){
 80001ce:	4b23      	ldr	r3, [pc, #140]	; (800025c <main+0x110>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b32      	cmp	r3, #50	; 0x32
 80001d4:	d10b      	bne.n	80001ee <main+0xa2>
	  		pozycjaX = pozycjaX + zmiana;
 80001d6:	68fa      	ldr	r2, [r7, #12]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4413      	add	r3, r2
 80001dc:	60fb      	str	r3, [r7, #12]
	  		if(pozycjaX >  250){
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	2bfa      	cmp	r3, #250	; 0xfa
 80001e2:	dd01      	ble.n	80001e8 <main+0x9c>
	  			pozycjaX = 250;
 80001e4:	23fa      	movs	r3, #250	; 0xfa
 80001e6:	60fb      	str	r3, [r7, #12]
	  			}
	  		HAL_Delay(100);
 80001e8:	2064      	movs	r0, #100	; 0x64
 80001ea:	f000 fca9 	bl	8000b40 <HAL_Delay>
	  		}


	  	if(RX_BUFFER[0] == '3'){
 80001ee:	4b1b      	ldr	r3, [pc, #108]	; (800025c <main+0x110>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b33      	cmp	r3, #51	; 0x33
 80001f4:	d10b      	bne.n	800020e <main+0xc2>
	  		pozycjaY = pozycjaY - zmiana;
 80001f6:	68ba      	ldr	r2, [r7, #8]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	1ad3      	subs	r3, r2, r3
 80001fc:	60bb      	str	r3, [r7, #8]
	  		if(pozycjaY < 50){
 80001fe:	68bb      	ldr	r3, [r7, #8]
 8000200:	2b31      	cmp	r3, #49	; 0x31
 8000202:	dc01      	bgt.n	8000208 <main+0xbc>
	  			pozycjaY = 50;
 8000204:	2332      	movs	r3, #50	; 0x32
 8000206:	60bb      	str	r3, [r7, #8]
	  			}
	  		HAL_Delay(100);
 8000208:	2064      	movs	r0, #100	; 0x64
 800020a:	f000 fc99 	bl	8000b40 <HAL_Delay>
	  		}


	  	if(RX_BUFFER[0] == '4'){
 800020e:	4b13      	ldr	r3, [pc, #76]	; (800025c <main+0x110>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	2b34      	cmp	r3, #52	; 0x34
 8000214:	d10b      	bne.n	800022e <main+0xe2>
	  		pozycjaY = pozycjaY + zmiana;
 8000216:	68ba      	ldr	r2, [r7, #8]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4413      	add	r3, r2
 800021c:	60bb      	str	r3, [r7, #8]
	  		if(pozycjaY >  250){
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	2bfa      	cmp	r3, #250	; 0xfa
 8000222:	dd01      	ble.n	8000228 <main+0xdc>
	  			pozycjaY = 250;
 8000224:	23fa      	movs	r3, #250	; 0xfa
 8000226:	60bb      	str	r3, [r7, #8]
	  			}
	  	HAL_Delay(100);
 8000228:	2064      	movs	r0, #100	; 0x64
 800022a:	f000 fc89 	bl	8000b40 <HAL_Delay>
	  	}

	  	      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pozycjaX);
 800022e:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <main+0x118>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	68fa      	ldr	r2, [r7, #12]
 8000234:	635a      	str	r2, [r3, #52]	; 0x34
	  	      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pozycjaX);
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <main+0x118>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	639a      	str	r2, [r3, #56]	; 0x38
	  	  	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pozycjaY);
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <main+0x118>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	68ba      	ldr	r2, [r7, #8]
 8000244:	63da      	str	r2, [r3, #60]	; 0x3c
	  	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pozycjaY);
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <main+0x11c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	68ba      	ldr	r2, [r7, #8]
 800024c:	635a      	str	r2, [r3, #52]	; 0x34

	  	  	HAL_UART_Receive_IT(&huart3, RX_BUFFER, BUFFER_LEN);
 800024e:	2201      	movs	r2, #1
 8000250:	4902      	ldr	r1, [pc, #8]	; (800025c <main+0x110>)
 8000252:	4803      	ldr	r0, [pc, #12]	; (8000260 <main+0x114>)
 8000254:	f002 fe6b 	bl	8002f2e <HAL_UART_Receive_IT>
	  	  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000258:	e794      	b.n	8000184 <main+0x38>
 800025a:	bf00      	nop
 800025c:	20000130 	.word	0x20000130
 8000260:	200000e8 	.word	0x200000e8
 8000264:	20000058 	.word	0x20000058
 8000268:	200000a0 	.word	0x200000a0

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b094      	sub	sp, #80	; 0x50
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f003 fbba 	bl	80039f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029c:	2302      	movs	r3, #2
 800029e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a0:	2301      	movs	r3, #1
 80002a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a4:	2310      	movs	r3, #16
 80002a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a8:	2300      	movs	r3, #0
 80002aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fab1 	bl	8001818 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002bc:	f000 fa24 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c4:	2300      	movs	r3, #0
 80002c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fd1e 	bl	8001d1c <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002e6:	f000 fa0f 	bl	8000708 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ea:	2302      	movs	r3, #2
 80002ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 fe9f 	bl	8002038 <HAL_RCCEx_PeriphCLKConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000300:	f000 fa02 	bl	8000708 <Error_Handler>
  }
}
 8000304:	bf00      	nop
 8000306:	3750      	adds	r7, #80	; 0x50
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800031c:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <MX_ADC1_Init+0x94>)
 800031e:	4a21      	ldr	r2, [pc, #132]	; (80003a4 <MX_ADC1_Init+0x98>)
 8000320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <MX_ADC1_Init+0x94>)
 8000324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000328:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800032a:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <MX_ADC1_Init+0x94>)
 800032c:	2201      	movs	r2, #1
 800032e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_ADC1_Init+0x94>)
 8000332:	2200      	movs	r2, #0
 8000334:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_ADC1_Init+0x94>)
 8000338:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800033c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800033e:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_ADC1_Init+0x94>)
 8000340:	2200      	movs	r2, #0
 8000342:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <MX_ADC1_Init+0x94>)
 8000346:	2202      	movs	r2, #2
 8000348:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800034a:	4815      	ldr	r0, [pc, #84]	; (80003a0 <MX_ADC1_Init+0x94>)
 800034c:	f000 fc1c 	bl	8000b88 <HAL_ADC_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000356:	f000 f9d7 	bl	8000708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800035a:	2301      	movs	r3, #1
 800035c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800035e:	2301      	movs	r3, #1
 8000360:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4619      	mov	r1, r3
 800036a:	480d      	ldr	r0, [pc, #52]	; (80003a0 <MX_ADC1_Init+0x94>)
 800036c:	f000 fdb6 	bl	8000edc <HAL_ADC_ConfigChannel>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000376:	f000 f9c7 	bl	8000708 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800037a:	2302      	movs	r3, #2
 800037c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800037e:	2302      	movs	r3, #2
 8000380:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4619      	mov	r1, r3
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <MX_ADC1_Init+0x94>)
 8000388:	f000 fda8 	bl	8000edc <HAL_ADC_ConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000392:	f000 f9b9 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000028 	.word	0x20000028
 80003a4:	40012400 	.word	0x40012400

080003a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b096      	sub	sp, #88	; 0x58
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]
 80003d6:	615a      	str	r2, [r3, #20]
 80003d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2220      	movs	r2, #32
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f003 fb07 	bl	80039f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003e6:	4b4a      	ldr	r3, [pc, #296]	; (8000510 <MX_TIM1_Init+0x168>)
 80003e8:	4a4a      	ldr	r2, [pc, #296]	; (8000514 <MX_TIM1_Init+0x16c>)
 80003ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80003ec:	4b48      	ldr	r3, [pc, #288]	; (8000510 <MX_TIM1_Init+0x168>)
 80003ee:	224f      	movs	r2, #79	; 0x4f
 80003f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f2:	4b47      	ldr	r3, [pc, #284]	; (8000510 <MX_TIM1_Init+0x168>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80003f8:	4b45      	ldr	r3, [pc, #276]	; (8000510 <MX_TIM1_Init+0x168>)
 80003fa:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80003fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000400:	4b43      	ldr	r3, [pc, #268]	; (8000510 <MX_TIM1_Init+0x168>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000406:	4b42      	ldr	r3, [pc, #264]	; (8000510 <MX_TIM1_Init+0x168>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800040c:	4b40      	ldr	r3, [pc, #256]	; (8000510 <MX_TIM1_Init+0x168>)
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000412:	483f      	ldr	r0, [pc, #252]	; (8000510 <MX_TIM1_Init+0x168>)
 8000414:	f001 fec6 	bl	80021a4 <HAL_TIM_Base_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800041e:	f000 f973 	bl	8000708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000426:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000428:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800042c:	4619      	mov	r1, r3
 800042e:	4838      	ldr	r0, [pc, #224]	; (8000510 <MX_TIM1_Init+0x168>)
 8000430:	f002 f912 	bl	8002658 <HAL_TIM_ConfigClockSource>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800043a:	f000 f965 	bl	8000708 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800043e:	4834      	ldr	r0, [pc, #208]	; (8000510 <MX_TIM1_Init+0x168>)
 8000440:	f001 feff 	bl	8002242 <HAL_TIM_PWM_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800044a:	f000 f95d 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044e:	2300      	movs	r3, #0
 8000450:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000452:	2300      	movs	r3, #0
 8000454:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000456:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800045a:	4619      	mov	r1, r3
 800045c:	482c      	ldr	r0, [pc, #176]	; (8000510 <MX_TIM1_Init+0x168>)
 800045e:	f002 fc67 	bl	8002d30 <HAL_TIMEx_MasterConfigSynchronization>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000468:	f000 f94e 	bl	8000708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800046c:	2360      	movs	r3, #96	; 0x60
 800046e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000474:	2300      	movs	r3, #0
 8000476:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000478:	2300      	movs	r3, #0
 800047a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800047c:	2300      	movs	r3, #0
 800047e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000480:	2300      	movs	r3, #0
 8000482:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800048c:	2200      	movs	r2, #0
 800048e:	4619      	mov	r1, r3
 8000490:	481f      	ldr	r0, [pc, #124]	; (8000510 <MX_TIM1_Init+0x168>)
 8000492:	f002 f81f 	bl	80024d4 <HAL_TIM_PWM_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800049c:	f000 f934 	bl	8000708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a4:	2204      	movs	r2, #4
 80004a6:	4619      	mov	r1, r3
 80004a8:	4819      	ldr	r0, [pc, #100]	; (8000510 <MX_TIM1_Init+0x168>)
 80004aa:	f002 f813 	bl	80024d4 <HAL_TIM_PWM_ConfigChannel>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80004b4:	f000 f928 	bl	8000708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004bc:	2208      	movs	r2, #8
 80004be:	4619      	mov	r1, r3
 80004c0:	4813      	ldr	r0, [pc, #76]	; (8000510 <MX_TIM1_Init+0x168>)
 80004c2:	f002 f807 	bl	80024d4 <HAL_TIM_PWM_ConfigChannel>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80004cc:	f000 f91c 	bl	8000708 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	4619      	mov	r1, r3
 80004f2:	4807      	ldr	r0, [pc, #28]	; (8000510 <MX_TIM1_Init+0x168>)
 80004f4:	f002 fc7a 	bl	8002dec <HAL_TIMEx_ConfigBreakDeadTime>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80004fe:	f000 f903 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <MX_TIM1_Init+0x168>)
 8000504:	f000 f9ac 	bl	8000860 <HAL_TIM_MspPostInit>

}
 8000508:	bf00      	nop
 800050a:	3758      	adds	r7, #88	; 0x58
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000058 	.word	0x20000058
 8000514:	40012c00 	.word	0x40012c00

08000518 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08e      	sub	sp, #56	; 0x38
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052c:	f107 0320 	add.w	r3, r7, #32
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
 8000544:	615a      	str	r2, [r3, #20]
 8000546:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000548:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <MX_TIM2_Init+0xe8>)
 800054a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800054e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000550:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <MX_TIM2_Init+0xe8>)
 8000552:	224f      	movs	r2, #79	; 0x4f
 8000554:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000556:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <MX_TIM2_Init+0xe8>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <MX_TIM2_Init+0xe8>)
 800055e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000562:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <MX_TIM2_Init+0xe8>)
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800056a:	4b25      	ldr	r3, [pc, #148]	; (8000600 <MX_TIM2_Init+0xe8>)
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000570:	4823      	ldr	r0, [pc, #140]	; (8000600 <MX_TIM2_Init+0xe8>)
 8000572:	f001 fe17 	bl	80021a4 <HAL_TIM_Base_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800057c:	f000 f8c4 	bl	8000708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800058a:	4619      	mov	r1, r3
 800058c:	481c      	ldr	r0, [pc, #112]	; (8000600 <MX_TIM2_Init+0xe8>)
 800058e:	f002 f863 	bl	8002658 <HAL_TIM_ConfigClockSource>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000598:	f000 f8b6 	bl	8000708 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800059c:	4818      	ldr	r0, [pc, #96]	; (8000600 <MX_TIM2_Init+0xe8>)
 800059e:	f001 fe50 	bl	8002242 <HAL_TIM_PWM_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80005a8:	f000 f8ae 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4619      	mov	r1, r3
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <MX_TIM2_Init+0xe8>)
 80005bc:	f002 fbb8 	bl	8002d30 <HAL_TIMEx_MasterConfigSynchronization>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80005c6:	f000 f89f 	bl	8000708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ca:	2360      	movs	r3, #96	; 0x60
 80005cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	4619      	mov	r1, r3
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <MX_TIM2_Init+0xe8>)
 80005e2:	f001 ff77 	bl	80024d4 <HAL_TIM_PWM_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80005ec:	f000 f88c 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <MX_TIM2_Init+0xe8>)
 80005f2:	f000 f935 	bl	8000860 <HAL_TIM_MspPostInit>

}
 80005f6:	bf00      	nop
 80005f8:	3738      	adds	r7, #56	; 0x38
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000a0 	.word	0x200000a0

08000604 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_USART3_UART_Init+0x50>)
 800060c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 8000610:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000614:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 800063c:	f002 fc27 	bl	8002e8e <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000646:	f000 f85f 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000e8 	.word	0x200000e8
 8000654:	40004800 	.word	0x40004800

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <MX_GPIO_Init+0xa8>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a23      	ldr	r2, [pc, #140]	; (8000700 <MX_GPIO_Init+0xa8>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_GPIO_Init+0xa8>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0310 	and.w	r3, r3, #16
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_GPIO_Init+0xa8>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a1d      	ldr	r2, [pc, #116]	; (8000700 <MX_GPIO_Init+0xa8>)
 800068a:	f043 0320 	orr.w	r3, r3, #32
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_GPIO_Init+0xa8>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0320 	and.w	r3, r3, #32
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_GPIO_Init+0xa8>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_GPIO_Init+0xa8>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_GPIO_Init+0xa8>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_GPIO_Init+0xa8>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a11      	ldr	r2, [pc, #68]	; (8000700 <MX_GPIO_Init+0xa8>)
 80006ba:	f043 0308 	orr.w	r3, r3, #8
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_GPIO_Init+0xa8>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0308 	and.w	r3, r3, #8
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_GPIO_Init+0xac>)
 80006d4:	f001 f888 	bl	80017e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	4619      	mov	r1, r3
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_GPIO_Init+0xac>)
 80006f2:	f000 fef5 	bl	80014e0 <HAL_GPIO_Init>

}
 80006f6:	bf00      	nop
 80006f8:	3720      	adds	r7, #32
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	40011000 	.word	0x40011000

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_MspInit+0x5c>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <HAL_MspInit+0x5c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6193      	str	r3, [r2, #24]
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_MspInit+0x5c>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <HAL_MspInit+0x5c>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <HAL_MspInit+0x5c>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_MspInit+0x5c>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_MspInit+0x60>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <HAL_MspInit+0x60>)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	40021000 	.word	0x40021000
 8000774:	40010000 	.word	0x40010000

08000778 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <HAL_ADC_MspInit+0x7c>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d129      	bne.n	80007ec <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <HAL_ADC_MspInit+0x80>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <HAL_ADC_MspInit+0x80>)
 800079e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <HAL_ADC_MspInit+0x80>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <HAL_ADC_MspInit+0x80>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <HAL_ADC_MspInit+0x80>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_ADC_MspInit+0x80>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80007c8:	2306      	movs	r3, #6
 80007ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007cc:	2303      	movs	r3, #3
 80007ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	4809      	ldr	r0, [pc, #36]	; (80007fc <HAL_ADC_MspInit+0x84>)
 80007d8:	f000 fe82 	bl	80014e0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2012      	movs	r0, #18
 80007e2:	f000 fd94 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007e6:	2012      	movs	r0, #18
 80007e8:	f000 fdad 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40012400 	.word	0x40012400
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010800 	.word	0x40010800

08000800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <HAL_TIM_Base_MspInit+0x58>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d10c      	bne.n	800082c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_TIM_Base_MspInit+0x5c>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a11      	ldr	r2, [pc, #68]	; (800085c <HAL_TIM_Base_MspInit+0x5c>)
 8000818:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_TIM_Base_MspInit+0x5c>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800082a:	e010      	b.n	800084e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000834:	d10b      	bne.n	800084e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_TIM_Base_MspInit+0x5c>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <HAL_TIM_Base_MspInit+0x5c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_TIM_Base_MspInit+0x5c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	40012c00 	.word	0x40012c00
 800085c:	40021000 	.word	0x40021000

08000860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <HAL_TIM_MspPostInit+0x98>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d119      	bne.n	80008b4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <HAL_TIM_MspPostInit+0x9c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <HAL_TIM_MspPostInit+0x9c>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <HAL_TIM_MspPostInit+0x9c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000898:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800089c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2302      	movs	r3, #2
 80008a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	4619      	mov	r1, r3
 80008ac:	4814      	ldr	r0, [pc, #80]	; (8000900 <HAL_TIM_MspPostInit+0xa0>)
 80008ae:	f000 fe17 	bl	80014e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80008b2:	e01c      	b.n	80008ee <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008bc:	d117      	bne.n	80008ee <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_TIM_MspPostInit+0x9c>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_TIM_MspPostInit+0x9c>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6193      	str	r3, [r2, #24]
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_TIM_MspPostInit+0x9c>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008d6:	2301      	movs	r3, #1
 80008d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2302      	movs	r3, #2
 80008e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <HAL_TIM_MspPostInit+0xa0>)
 80008ea:	f000 fdf9 	bl	80014e0 <HAL_GPIO_Init>
}
 80008ee:	bf00      	nop
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40012c00 	.word	0x40012c00
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010800 	.word	0x40010800

08000904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <HAL_UART_MspInit+0x9c>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d139      	bne.n	8000998 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <HAL_UART_MspInit+0xa0>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	4a1e      	ldr	r2, [pc, #120]	; (80009a4 <HAL_UART_MspInit+0xa0>)
 800092a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800092e:	61d3      	str	r3, [r2, #28]
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_UART_MspInit+0xa0>)
 8000932:	69db      	ldr	r3, [r3, #28]
 8000934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_UART_MspInit+0xa0>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a18      	ldr	r2, [pc, #96]	; (80009a4 <HAL_UART_MspInit+0xa0>)
 8000942:	f043 0308 	orr.w	r3, r3, #8
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <HAL_UART_MspInit+0xa0>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000958:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4619      	mov	r1, r3
 8000968:	480f      	ldr	r0, [pc, #60]	; (80009a8 <HAL_UART_MspInit+0xa4>)
 800096a:	f000 fdb9 	bl	80014e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800096e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4619      	mov	r1, r3
 8000982:	4809      	ldr	r0, [pc, #36]	; (80009a8 <HAL_UART_MspInit+0xa4>)
 8000984:	f000 fdac 	bl	80014e0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2027      	movs	r0, #39	; 0x27
 800098e:	f000 fcbe 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000992:	2027      	movs	r0, #39	; 0x27
 8000994:	f000 fcd7 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40004800 	.word	0x40004800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010c00 	.word	0x40010c00

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f2:	f000 f889 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <ADC1_2_IRQHandler+0x10>)
 8000a02:	f000 f999 	bl	8000d38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000028 	.word	0x20000028

08000a10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <USART3_IRQHandler+0x10>)
 8000a16:	f002 faaf 	bl	8002f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000e8 	.word	0x200000e8

08000a24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a30:	f7ff fff8 	bl	8000a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a36:	490c      	ldr	r1, [pc, #48]	; (8000a68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a38:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a4c:	4c09      	ldr	r4, [pc, #36]	; (8000a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f002 ffa7 	bl	80039ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5e:	f7ff fb75 	bl	800014c <main>
  bx lr
 8000a62:	4770      	bx	lr
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a6c:	08003a50 	.word	0x08003a50
  ldr r2, =_sbss
 8000a70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a74:	20000138 	.word	0x20000138

08000a78 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <CAN1_RX1_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_Init+0x28>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_Init+0x28>)
 8000a86:	f043 0310 	orr.w	r3, r3, #16
 8000a8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 fc33 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	200f      	movs	r0, #15
 8000a94:	f000 f808 	bl	8000aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a98:	f7ff fe3c 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x54>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x58>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fc4b 	bl	8001362 <HAL_SYSTICK_Config>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00e      	b.n	8000af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d80a      	bhi.n	8000af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f000 fc13 	bl	800130e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae8:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <HAL_InitTick+0x5c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000004 	.word	0x20000004

08000b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x1c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_IncTick+0x20>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a03      	ldr	r2, [pc, #12]	; (8000b28 <HAL_IncTick+0x20>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000134 	.word	0x20000134

08000b2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <HAL_GetTick+0x10>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	20000134 	.word	0x20000134

08000b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff fff0 	bl	8000b2c <HAL_GetTick>
 8000b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b58:	d005      	beq.n	8000b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_Delay+0x44>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4413      	add	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b66:	bf00      	nop
 8000b68:	f7ff ffe0 	bl	8000b2c <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d8f7      	bhi.n	8000b68 <HAL_Delay+0x28>
  {
  }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008

08000b88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e0be      	b.n	8000d28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d109      	bne.n	8000bcc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff fdd6 	bl	8000778 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f000 fa7d 	bl	80010cc <ADC_ConversionStop_Disable>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f040 8099 	bne.w	8000d16 <HAL_ADC_Init+0x18e>
 8000be4:	7dfb      	ldrb	r3, [r7, #23]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8095 	bne.w	8000d16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bf4:	f023 0302 	bic.w	r3, r3, #2
 8000bf8:	f043 0202 	orr.w	r2, r3, #2
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7b1b      	ldrb	r3, [r3, #12]
 8000c0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c20:	d003      	beq.n	8000c2a <HAL_ADC_Init+0xa2>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <HAL_ADC_Init+0xa8>
 8000c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2e:	e000      	b.n	8000c32 <HAL_ADC_Init+0xaa>
 8000c30:	2300      	movs	r3, #0
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7d1b      	ldrb	r3, [r3, #20]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d119      	bne.n	8000c74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7b1b      	ldrb	r3, [r3, #12]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d109      	bne.n	8000c5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	035a      	lsls	r2, r3, #13
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	e00b      	b.n	8000c74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c60:	f043 0220 	orr.w	r2, r3, #32
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6c:	f043 0201 	orr.w	r2, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <HAL_ADC_Init+0x1a8>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	6812      	ldr	r2, [r2, #0]
 8000c96:	68b9      	ldr	r1, [r7, #8]
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ca4:	d003      	beq.n	8000cae <HAL_ADC_Init+0x126>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d104      	bne.n	8000cb8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	051b      	lsls	r3, r3, #20
 8000cb6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_ADC_Init+0x1ac>)
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d10b      	bne.n	8000cf4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce6:	f023 0303 	bic.w	r3, r3, #3
 8000cea:	f043 0201 	orr.w	r2, r3, #1
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cf2:	e018      	b.n	8000d26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	f023 0312 	bic.w	r3, r3, #18
 8000cfc:	f043 0210 	orr.w	r2, r3, #16
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	f043 0201 	orr.w	r2, r3, #1
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d14:	e007      	b.n	8000d26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1a:	f043 0210 	orr.w	r2, r3, #16
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	ffe1f7fd 	.word	0xffe1f7fd
 8000d34:	ff1f0efe 	.word	0xff1f0efe

08000d38 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	f003 0320 	and.w	r3, r3, #32
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d03e      	beq.n	8000dd8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d039      	beq.n	8000dd8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d105      	bne.n	8000d7c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d86:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d8a:	d11d      	bne.n	8000dc8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d119      	bne.n	8000dc8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0220 	bic.w	r2, r2, #32
 8000da2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d105      	bne.n	8000dc8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	f043 0201 	orr.w	r2, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 f874 	bl	8000eb6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f06f 0212 	mvn.w	r2, #18
 8000dd6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d04d      	beq.n	8000e7e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d048      	beq.n	8000e7e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d105      	bne.n	8000e04 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000e0e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000e12:	d012      	beq.n	8000e3a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d125      	bne.n	8000e6e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e2c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e30:	d11d      	bne.n	8000e6e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d119      	bne.n	8000e6e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e48:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d105      	bne.n	8000e6e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e66:	f043 0201 	orr.w	r2, r3, #1
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 f96d 	bl	800114e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f06f 020c 	mvn.w	r2, #12
 8000e7c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d012      	beq.n	8000eae <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00d      	beq.n	8000eae <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f812 	bl	8000ec8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f06f 0201 	mvn.w	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
	...

08000edc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d101      	bne.n	8000efc <HAL_ADC_ConfigChannel+0x20>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	e0dc      	b.n	80010b6 <HAL_ADC_ConfigChannel+0x1da>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2201      	movs	r2, #1
 8000f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b06      	cmp	r3, #6
 8000f0a:	d81c      	bhi.n	8000f46 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3b05      	subs	r3, #5
 8000f1e:	221f      	movs	r2, #31
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	4019      	ands	r1, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	3b05      	subs	r3, #5
 8000f38:	fa00 f203 	lsl.w	r2, r0, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34
 8000f44:	e03c      	b.n	8000fc0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b0c      	cmp	r3, #12
 8000f4c:	d81c      	bhi.n	8000f88 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3b23      	subs	r3, #35	; 0x23
 8000f60:	221f      	movs	r2, #31
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	4019      	ands	r1, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	3b23      	subs	r3, #35	; 0x23
 8000f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	631a      	str	r2, [r3, #48]	; 0x30
 8000f86:	e01b      	b.n	8000fc0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	3b41      	subs	r3, #65	; 0x41
 8000f9a:	221f      	movs	r2, #31
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	4019      	ands	r1, r3
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3b41      	subs	r3, #65	; 0x41
 8000fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b09      	cmp	r3, #9
 8000fc6:	d91c      	bls.n	8001002 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68d9      	ldr	r1, [r3, #12]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b1e      	subs	r3, #30
 8000fda:	2207      	movs	r2, #7
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4019      	ands	r1, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	6898      	ldr	r0, [r3, #8]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3b1e      	subs	r3, #30
 8000ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	e019      	b.n	8001036 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6919      	ldr	r1, [r3, #16]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	2207      	movs	r2, #7
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	4019      	ands	r1, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	6898      	ldr	r0, [r3, #8]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	fa00 f203 	lsl.w	r2, r0, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	430a      	orrs	r2, r1
 8001034:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b10      	cmp	r3, #16
 800103c:	d003      	beq.n	8001046 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001042:	2b11      	cmp	r3, #17
 8001044:	d132      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d125      	bne.n	800109c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d126      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800106c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b10      	cmp	r3, #16
 8001074:	d11a      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800107c:	fba2 2303 	umull	r2, r3, r2, r3
 8001080:	0c9a      	lsrs	r2, r3, #18
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800108c:	e002      	b.n	8001094 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3b01      	subs	r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f9      	bne.n	800108e <HAL_ADC_ConfigChannel+0x1b2>
 800109a:	e007      	b.n	80010ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	f043 0220 	orr.w	r2, r3, #32
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	40012400 	.word	0x40012400
 80010c4:	20000000 	.word	0x20000000
 80010c8:	431bde83 	.word	0x431bde83

080010cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d12e      	bne.n	8001144 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0201 	bic.w	r2, r2, #1
 80010f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010f6:	f7ff fd19 	bl	8000b2c <HAL_GetTick>
 80010fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010fc:	e01b      	b.n	8001136 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010fe:	f7ff fd15 	bl	8000b2c <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d914      	bls.n	8001136 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10d      	bne.n	8001136 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	f043 0210 	orr.w	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	f043 0201 	orr.w	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e007      	b.n	8001146 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b01      	cmp	r3, #1
 8001142:	d0dc      	beq.n	80010fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4906      	ldr	r1, [pc, #24]	; (80011f8 <__NVIC_EnableIRQ+0x34>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f7ff ff90 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff2d 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001320:	f7ff ff42 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8001324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff ff90 	bl	8001250 <NVIC_EncodePriority>
 8001330:	4602      	mov	r2, r0
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff5f 	bl	80011fc <__NVIC_SetPriority>
}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff35 	bl	80011c4 <__NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa2 	bl	80012b4 <SysTick_Config>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800137a:	b480      	push	{r7}
 800137c:	b085      	sub	sp, #20
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d008      	beq.n	80013a4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2204      	movs	r2, #4
 8001396:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e020      	b.n	80013e6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 020e 	bic.w	r2, r2, #14
 80013b2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d005      	beq.n	8001414 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2204      	movs	r2, #4
 800140c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	e051      	b.n	80014b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 020e 	bic.w	r2, r2, #14
 8001422:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <HAL_DMA_Abort_IT+0xd4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d029      	beq.n	8001492 <HAL_DMA_Abort_IT+0xa2>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <HAL_DMA_Abort_IT+0xd8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d022      	beq.n	800148e <HAL_DMA_Abort_IT+0x9e>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <HAL_DMA_Abort_IT+0xdc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d01a      	beq.n	8001488 <HAL_DMA_Abort_IT+0x98>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a1e      	ldr	r2, [pc, #120]	; (80014d0 <HAL_DMA_Abort_IT+0xe0>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d012      	beq.n	8001482 <HAL_DMA_Abort_IT+0x92>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <HAL_DMA_Abort_IT+0xe4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d00a      	beq.n	800147c <HAL_DMA_Abort_IT+0x8c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <HAL_DMA_Abort_IT+0xe8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d102      	bne.n	8001476 <HAL_DMA_Abort_IT+0x86>
 8001470:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001474:	e00e      	b.n	8001494 <HAL_DMA_Abort_IT+0xa4>
 8001476:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800147a:	e00b      	b.n	8001494 <HAL_DMA_Abort_IT+0xa4>
 800147c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001480:	e008      	b.n	8001494 <HAL_DMA_Abort_IT+0xa4>
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	e005      	b.n	8001494 <HAL_DMA_Abort_IT+0xa4>
 8001488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148c:	e002      	b.n	8001494 <HAL_DMA_Abort_IT+0xa4>
 800148e:	2310      	movs	r3, #16
 8001490:	e000      	b.n	8001494 <HAL_DMA_Abort_IT+0xa4>
 8001492:	2301      	movs	r3, #1
 8001494:	4a11      	ldr	r2, [pc, #68]	; (80014dc <HAL_DMA_Abort_IT+0xec>)
 8001496:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	4798      	blx	r3
    } 
  }
  return status;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40020008 	.word	0x40020008
 80014c8:	4002001c 	.word	0x4002001c
 80014cc:	40020030 	.word	0x40020030
 80014d0:	40020044 	.word	0x40020044
 80014d4:	40020058 	.word	0x40020058
 80014d8:	4002006c 	.word	0x4002006c
 80014dc:	40020000 	.word	0x40020000

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b08b      	sub	sp, #44	; 0x2c
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f2:	e169      	b.n	80017c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f4:	2201      	movs	r2, #1
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	429a      	cmp	r2, r3
 800150e:	f040 8158 	bne.w	80017c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4a9a      	ldr	r2, [pc, #616]	; (8001780 <HAL_GPIO_Init+0x2a0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d05e      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 800151c:	4a98      	ldr	r2, [pc, #608]	; (8001780 <HAL_GPIO_Init+0x2a0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d875      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001522:	4a98      	ldr	r2, [pc, #608]	; (8001784 <HAL_GPIO_Init+0x2a4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d058      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001528:	4a96      	ldr	r2, [pc, #600]	; (8001784 <HAL_GPIO_Init+0x2a4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d86f      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800152e:	4a96      	ldr	r2, [pc, #600]	; (8001788 <HAL_GPIO_Init+0x2a8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d052      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001534:	4a94      	ldr	r2, [pc, #592]	; (8001788 <HAL_GPIO_Init+0x2a8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d869      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800153a:	4a94      	ldr	r2, [pc, #592]	; (800178c <HAL_GPIO_Init+0x2ac>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d04c      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001540:	4a92      	ldr	r2, [pc, #584]	; (800178c <HAL_GPIO_Init+0x2ac>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d863      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001546:	4a92      	ldr	r2, [pc, #584]	; (8001790 <HAL_GPIO_Init+0x2b0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d046      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 800154c:	4a90      	ldr	r2, [pc, #576]	; (8001790 <HAL_GPIO_Init+0x2b0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d85d      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001552:	2b12      	cmp	r3, #18
 8001554:	d82a      	bhi.n	80015ac <HAL_GPIO_Init+0xcc>
 8001556:	2b12      	cmp	r3, #18
 8001558:	d859      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800155a:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <HAL_GPIO_Init+0x80>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	080015db 	.word	0x080015db
 8001564:	080015b5 	.word	0x080015b5
 8001568:	080015c7 	.word	0x080015c7
 800156c:	08001609 	.word	0x08001609
 8001570:	0800160f 	.word	0x0800160f
 8001574:	0800160f 	.word	0x0800160f
 8001578:	0800160f 	.word	0x0800160f
 800157c:	0800160f 	.word	0x0800160f
 8001580:	0800160f 	.word	0x0800160f
 8001584:	0800160f 	.word	0x0800160f
 8001588:	0800160f 	.word	0x0800160f
 800158c:	0800160f 	.word	0x0800160f
 8001590:	0800160f 	.word	0x0800160f
 8001594:	0800160f 	.word	0x0800160f
 8001598:	0800160f 	.word	0x0800160f
 800159c:	0800160f 	.word	0x0800160f
 80015a0:	0800160f 	.word	0x0800160f
 80015a4:	080015bd 	.word	0x080015bd
 80015a8:	080015d1 	.word	0x080015d1
 80015ac:	4a79      	ldr	r2, [pc, #484]	; (8001794 <HAL_GPIO_Init+0x2b4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015b2:	e02c      	b.n	800160e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	623b      	str	r3, [r7, #32]
          break;
 80015ba:	e029      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	3304      	adds	r3, #4
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e024      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	3308      	adds	r3, #8
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e01f      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	330c      	adds	r3, #12
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	e01a      	b.n	8001610 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015e2:	2304      	movs	r3, #4
 80015e4:	623b      	str	r3, [r7, #32]
          break;
 80015e6:	e013      	b.n	8001610 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f0:	2308      	movs	r3, #8
 80015f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	611a      	str	r2, [r3, #16]
          break;
 80015fa:	e009      	b.n	8001610 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015fc:	2308      	movs	r3, #8
 80015fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	615a      	str	r2, [r3, #20]
          break;
 8001606:	e003      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e000      	b.n	8001610 <HAL_GPIO_Init+0x130>
          break;
 800160e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2bff      	cmp	r3, #255	; 0xff
 8001614:	d801      	bhi.n	800161a <HAL_GPIO_Init+0x13a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	e001      	b.n	800161e <HAL_GPIO_Init+0x13e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3304      	adds	r3, #4
 800161e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2bff      	cmp	r3, #255	; 0xff
 8001624:	d802      	bhi.n	800162c <HAL_GPIO_Init+0x14c>
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	e002      	b.n	8001632 <HAL_GPIO_Init+0x152>
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	3b08      	subs	r3, #8
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	210f      	movs	r1, #15
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	401a      	ands	r2, r3
 8001644:	6a39      	ldr	r1, [r7, #32]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	431a      	orrs	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 80b1 	beq.w	80017c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001660:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a4c      	ldr	r2, [pc, #304]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <HAL_GPIO_Init+0x2b8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001678:	4a48      	ldr	r2, [pc, #288]	; (800179c <HAL_GPIO_Init+0x2bc>)
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001684:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	220f      	movs	r2, #15
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a40      	ldr	r2, [pc, #256]	; (80017a0 <HAL_GPIO_Init+0x2c0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d013      	beq.n	80016cc <HAL_GPIO_Init+0x1ec>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a3f      	ldr	r2, [pc, #252]	; (80017a4 <HAL_GPIO_Init+0x2c4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00d      	beq.n	80016c8 <HAL_GPIO_Init+0x1e8>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a3e      	ldr	r2, [pc, #248]	; (80017a8 <HAL_GPIO_Init+0x2c8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d007      	beq.n	80016c4 <HAL_GPIO_Init+0x1e4>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a3d      	ldr	r2, [pc, #244]	; (80017ac <HAL_GPIO_Init+0x2cc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d101      	bne.n	80016c0 <HAL_GPIO_Init+0x1e0>
 80016bc:	2303      	movs	r3, #3
 80016be:	e006      	b.n	80016ce <HAL_GPIO_Init+0x1ee>
 80016c0:	2304      	movs	r3, #4
 80016c2:	e004      	b.n	80016ce <HAL_GPIO_Init+0x1ee>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e002      	b.n	80016ce <HAL_GPIO_Init+0x1ee>
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <HAL_GPIO_Init+0x1ee>
 80016cc:	2300      	movs	r3, #0
 80016ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d0:	f002 0203 	and.w	r2, r2, #3
 80016d4:	0092      	lsls	r2, r2, #2
 80016d6:	4093      	lsls	r3, r2
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016de:	492f      	ldr	r1, [pc, #188]	; (800179c <HAL_GPIO_Init+0x2bc>)
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016f8:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	492c      	ldr	r1, [pc, #176]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	608b      	str	r3, [r1, #8]
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001706:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	43db      	mvns	r3, r3
 800170e:	4928      	ldr	r1, [pc, #160]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001710:	4013      	ands	r3, r2
 8001712:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	4922      	ldr	r1, [pc, #136]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	60cb      	str	r3, [r1, #12]
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	43db      	mvns	r3, r3
 8001736:	491e      	ldr	r1, [pc, #120]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001738:	4013      	ands	r3, r2
 800173a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4918      	ldr	r1, [pc, #96]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	43db      	mvns	r3, r3
 800175e:	4914      	ldr	r1, [pc, #80]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001760:	4013      	ands	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d021      	beq.n	80017b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	490e      	ldr	r1, [pc, #56]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
 800177c:	e021      	b.n	80017c2 <HAL_GPIO_Init+0x2e2>
 800177e:	bf00      	nop
 8001780:	10320000 	.word	0x10320000
 8001784:	10310000 	.word	0x10310000
 8001788:	10220000 	.word	0x10220000
 800178c:	10210000 	.word	0x10210000
 8001790:	10120000 	.word	0x10120000
 8001794:	10110000 	.word	0x10110000
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000
 80017a0:	40010800 	.word	0x40010800
 80017a4:	40010c00 	.word	0x40010c00
 80017a8:	40011000 	.word	0x40011000
 80017ac:	40011400 	.word	0x40011400
 80017b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_GPIO_Init+0x304>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	4909      	ldr	r1, [pc, #36]	; (80017e4 <HAL_GPIO_Init+0x304>)
 80017be:	4013      	ands	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	3301      	adds	r3, #1
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f47f ae8e 	bne.w	80014f4 <HAL_GPIO_Init+0x14>
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	372c      	adds	r7, #44	; 0x2c
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40010400 	.word	0x40010400

080017e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
 80017f4:	4613      	mov	r3, r2
 80017f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017f8:	787b      	ldrb	r3, [r7, #1]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fe:	887a      	ldrh	r2, [r7, #2]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001804:	e003      	b.n	800180e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	041a      	lsls	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	611a      	str	r2, [r3, #16]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e272      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8087 	beq.w	8001946 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001838:	4b92      	ldr	r3, [pc, #584]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b04      	cmp	r3, #4
 8001842:	d00c      	beq.n	800185e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001844:	4b8f      	ldr	r3, [pc, #572]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b08      	cmp	r3, #8
 800184e:	d112      	bne.n	8001876 <HAL_RCC_OscConfig+0x5e>
 8001850:	4b8c      	ldr	r3, [pc, #560]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d10b      	bne.n	8001876 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185e:	4b89      	ldr	r3, [pc, #548]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d06c      	beq.n	8001944 <HAL_RCC_OscConfig+0x12c>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d168      	bne.n	8001944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e24c      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x76>
 8001880:	4b80      	ldr	r3, [pc, #512]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a7f      	ldr	r2, [pc, #508]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	e02e      	b.n	80018ec <HAL_RCC_OscConfig+0xd4>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x98>
 8001896:	4b7b      	ldr	r3, [pc, #492]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a7a      	ldr	r2, [pc, #488]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800189c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b78      	ldr	r3, [pc, #480]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a77      	ldr	r2, [pc, #476]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e01d      	b.n	80018ec <HAL_RCC_OscConfig+0xd4>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0xbc>
 80018ba:	4b72      	ldr	r3, [pc, #456]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a71      	ldr	r2, [pc, #452]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b6f      	ldr	r3, [pc, #444]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a6e      	ldr	r2, [pc, #440]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e00b      	b.n	80018ec <HAL_RCC_OscConfig+0xd4>
 80018d4:	4b6b      	ldr	r3, [pc, #428]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a6a      	ldr	r2, [pc, #424]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a67      	ldr	r2, [pc, #412]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff f91a 	bl	8000b2c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff f916 	bl	8000b2c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e200      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b5d      	ldr	r3, [pc, #372]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0xe4>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff f906 	bl	8000b2c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff f902 	bl	8000b2c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1ec      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x10c>
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d063      	beq.n	8001a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001952:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800195e:	4b49      	ldr	r3, [pc, #292]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b08      	cmp	r3, #8
 8001968:	d11c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x18c>
 800196a:	4b46      	ldr	r3, [pc, #280]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d116      	bne.n	80019a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	4b43      	ldr	r3, [pc, #268]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_RCC_OscConfig+0x176>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d001      	beq.n	800198e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e1c0      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4939      	ldr	r1, [pc, #228]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	e03a      	b.n	8001a1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <HAL_RCC_OscConfig+0x270>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff f8bb 	bl	8000b2c <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff f8b7 	bl	8000b2c <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e1a1      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4927      	ldr	r1, [pc, #156]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_RCC_OscConfig+0x270>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff f89a 	bl	8000b2c <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fc:	f7ff f896 	bl	8000b2c <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e180      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d03a      	beq.n	8001a9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d019      	beq.n	8001a62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a34:	f7ff f87a 	bl	8000b2c <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f876 	bl	8000b2c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e160      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f000 face 	bl	8001ffc <RCC_Delay>
 8001a60:	e01c      	b.n	8001a9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7ff f860 	bl	8000b2c <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6e:	e00f      	b.n	8001a90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a70:	f7ff f85c 	bl	8000b2c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d908      	bls.n	8001a90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e146      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	42420000 	.word	0x42420000
 8001a8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a90:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1e9      	bne.n	8001a70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a6 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aae:	4b8b      	ldr	r3, [pc, #556]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b88      	ldr	r3, [pc, #544]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a87      	ldr	r2, [pc, #540]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	61d3      	str	r3, [r2, #28]
 8001ac6:	4b85      	ldr	r3, [pc, #532]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4b82      	ldr	r3, [pc, #520]	; (8001ce0 <HAL_RCC_OscConfig+0x4c8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae2:	4b7f      	ldr	r3, [pc, #508]	; (8001ce0 <HAL_RCC_OscConfig+0x4c8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7e      	ldr	r2, [pc, #504]	; (8001ce0 <HAL_RCC_OscConfig+0x4c8>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7ff f81d 	bl	8000b2c <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7ff f819 	bl	8000b2c <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b64      	cmp	r3, #100	; 0x64
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e103      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b75      	ldr	r3, [pc, #468]	; (8001ce0 <HAL_RCC_OscConfig+0x4c8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x312>
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4a6e      	ldr	r2, [pc, #440]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6213      	str	r3, [r2, #32]
 8001b28:	e02d      	b.n	8001b86 <HAL_RCC_OscConfig+0x36e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x334>
 8001b32:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4a69      	ldr	r2, [pc, #420]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6213      	str	r3, [r2, #32]
 8001b3e:	4b67      	ldr	r3, [pc, #412]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a66      	ldr	r2, [pc, #408]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	6213      	str	r3, [r2, #32]
 8001b4a:	e01c      	b.n	8001b86 <HAL_RCC_OscConfig+0x36e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b05      	cmp	r3, #5
 8001b52:	d10c      	bne.n	8001b6e <HAL_RCC_OscConfig+0x356>
 8001b54:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	4a60      	ldr	r2, [pc, #384]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6213      	str	r3, [r2, #32]
 8001b60:	4b5e      	ldr	r3, [pc, #376]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4a5d      	ldr	r2, [pc, #372]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6213      	str	r3, [r2, #32]
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0x36e>
 8001b6e:	4b5b      	ldr	r3, [pc, #364]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a5a      	ldr	r2, [pc, #360]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6213      	str	r3, [r2, #32]
 8001b7a:	4b58      	ldr	r3, [pc, #352]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a57      	ldr	r2, [pc, #348]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d015      	beq.n	8001bba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7fe ffcd 	bl	8000b2c <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7fe ffc9 	bl	8000b2c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e0b1      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0ee      	beq.n	8001b96 <HAL_RCC_OscConfig+0x37e>
 8001bb8:	e014      	b.n	8001be4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bba:	f7fe ffb7 	bl	8000b2c <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7fe ffb3 	bl	8000b2c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e09b      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1ee      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d105      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bea:	4b3c      	ldr	r3, [pc, #240]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a3b      	ldr	r2, [pc, #236]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8087 	beq.w	8001d0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d061      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d146      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c14:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <HAL_RCC_OscConfig+0x4cc>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7fe ff87 	bl	8000b2c <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c22:	f7fe ff83 	bl	8000b2c <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e06d      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c34:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c48:	d108      	bne.n	8001c5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	4921      	ldr	r1, [pc, #132]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a19      	ldr	r1, [r3, #32]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	491b      	ldr	r1, [pc, #108]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7fe ff57 	bl	8000b2c <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7fe ff53 	bl	8000b2c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e03d      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x46a>
 8001ca0:	e035      	b.n	8001d0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_RCC_OscConfig+0x4cc>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7fe ff40 	bl	8000b2c <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7fe ff3c 	bl	8000b2c <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e026      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x498>
 8001cce:	e01e      	b.n	8001d0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e019      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40007000 	.word	0x40007000
 8001ce4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_OscConfig+0x500>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d001      	beq.n	8001d0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000

08001d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0d0      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d30:	4b6a      	ldr	r3, [pc, #424]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d910      	bls.n	8001d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b67      	ldr	r3, [pc, #412]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 0207 	bic.w	r2, r3, #7
 8001d46:	4965      	ldr	r1, [pc, #404]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b63      	ldr	r3, [pc, #396]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0b8      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d020      	beq.n	8001dae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d78:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d90:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a52      	ldr	r2, [pc, #328]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9c:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	494d      	ldr	r1, [pc, #308]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d040      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d115      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e07f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dda:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e073      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e06b      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfa:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f023 0203 	bic.w	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4936      	ldr	r1, [pc, #216]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e0c:	f7fe fe8e 	bl	8000b2c <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e14:	f7fe fe8a 	bl	8000b2c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e053      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 020c 	and.w	r2, r3, #12
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1eb      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d210      	bcs.n	8001e6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 0207 	bic.w	r2, r3, #7
 8001e52:	4922      	ldr	r1, [pc, #136]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e032      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4916      	ldr	r1, [pc, #88]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	490e      	ldr	r1, [pc, #56]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eaa:	f000 f821 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	490a      	ldr	r1, [pc, #40]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ebc:	5ccb      	ldrb	r3, [r1, r3]
 8001ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec2:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_RCC_ClockConfig+0x1d0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fdec 	bl	8000aa8 <HAL_InitTick>

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	08003a1c 	.word	0x08003a1c
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000004 	.word	0x20000004

08001ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d002      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x30>
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d003      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x36>
 8001f1e:	e027      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f22:	613b      	str	r3, [r7, #16]
      break;
 8001f24:	e027      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	0c9b      	lsrs	r3, r3, #18
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f30:	5cd3      	ldrb	r3, [r2, r3]
 8001f32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d010      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	0c5b      	lsrs	r3, r3, #17
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f4a:	5cd3      	ldrb	r3, [r2, r3]
 8001f4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f52:	fb03 f202 	mul.w	r2, r3, r2
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e004      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a0c      	ldr	r2, [pc, #48]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	613b      	str	r3, [r7, #16]
      break;
 8001f6e:	e002      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f72:	613b      	str	r3, [r7, #16]
      break;
 8001f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f76:	693b      	ldr	r3, [r7, #16]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	371c      	adds	r7, #28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	007a1200 	.word	0x007a1200
 8001f8c:	08003a34 	.word	0x08003a34
 8001f90:	08003a44 	.word	0x08003a44
 8001f94:	003d0900 	.word	0x003d0900

08001f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f9c:	4b02      	ldr	r3, [pc, #8]	; (8001fa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	20000000 	.word	0x20000000

08001fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fb0:	f7ff fff2 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4903      	ldr	r1, [pc, #12]	; (8001fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08003a2c 	.word	0x08003a2c

08001fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fd8:	f7ff ffde 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	0adb      	lsrs	r3, r3, #11
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	4903      	ldr	r1, [pc, #12]	; (8001ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08003a2c 	.word	0x08003a2c

08001ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <RCC_Delay+0x34>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <RCC_Delay+0x38>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0a5b      	lsrs	r3, r3, #9
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002018:	bf00      	nop
  }
  while (Delay --);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	60fa      	str	r2, [r7, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f9      	bne.n	8002018 <RCC_Delay+0x1c>
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20000000 	.word	0x20000000
 8002034:	10624dd3 	.word	0x10624dd3

08002038 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d07d      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002058:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10d      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	4a4b      	ldr	r2, [pc, #300]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800206a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206e:	61d3      	str	r3, [r2, #28]
 8002070:	4b49      	ldr	r3, [pc, #292]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207c:	2301      	movs	r3, #1
 800207e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	4b46      	ldr	r3, [pc, #280]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d118      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208c:	4b43      	ldr	r3, [pc, #268]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a42      	ldr	r2, [pc, #264]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002096:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002098:	f7fe fd48 	bl	8000b2c <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209e:	e008      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a0:	f7fe fd44 	bl	8000b2c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e06d      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b2:	4b3a      	ldr	r3, [pc, #232]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020be:	4b36      	ldr	r3, [pc, #216]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d02e      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d027      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020dc:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020e6:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020ec:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020f2:	4a29      	ldr	r2, [pc, #164]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d014      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe fd13 	bl	8000b2c <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7fe fd0f 	bl	8000b2c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	; 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e036      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ee      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4917      	ldr	r1, [pc, #92]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213a:	4313      	orrs	r3, r2
 800213c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4a13      	ldr	r2, [pc, #76]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	490b      	ldr	r1, [pc, #44]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	d008      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	4904      	ldr	r1, [pc, #16]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	40007000 	.word	0x40007000
 80021a0:	42420440 	.word	0x42420440

080021a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e041      	b.n	800223a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fb18 	bl	8000800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3304      	adds	r3, #4
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f000 fb00 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e041      	b.n	80022d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f839 	bl	80022e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	4619      	mov	r1, r3
 8002280:	4610      	mov	r0, r2
 8002282:	f000 fab1 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_TIM_PWM_Start_IT+0x28>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	bf14      	ite	ne
 8002314:	2301      	movne	r3, #1
 8002316:	2300      	moveq	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e022      	b.n	8002362 <HAL_TIM_PWM_Start_IT+0x6e>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b04      	cmp	r3, #4
 8002320:	d109      	bne.n	8002336 <HAL_TIM_PWM_Start_IT+0x42>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b01      	cmp	r3, #1
 800232c:	bf14      	ite	ne
 800232e:	2301      	movne	r3, #1
 8002330:	2300      	moveq	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	e015      	b.n	8002362 <HAL_TIM_PWM_Start_IT+0x6e>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d109      	bne.n	8002350 <HAL_TIM_PWM_Start_IT+0x5c>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	bf14      	ite	ne
 8002348:	2301      	movne	r3, #1
 800234a:	2300      	moveq	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	e008      	b.n	8002362 <HAL_TIM_PWM_Start_IT+0x6e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b01      	cmp	r3, #1
 800235a:	bf14      	ite	ne
 800235c:	2301      	movne	r3, #1
 800235e:	2300      	moveq	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e0a9      	b.n	80024be <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d104      	bne.n	800237a <HAL_TIM_PWM_Start_IT+0x86>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002378:	e013      	b.n	80023a2 <HAL_TIM_PWM_Start_IT+0xae>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d104      	bne.n	800238a <HAL_TIM_PWM_Start_IT+0x96>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002388:	e00b      	b.n	80023a2 <HAL_TIM_PWM_Start_IT+0xae>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d104      	bne.n	800239a <HAL_TIM_PWM_Start_IT+0xa6>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002398:	e003      	b.n	80023a2 <HAL_TIM_PWM_Start_IT+0xae>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2202      	movs	r2, #2
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	d841      	bhi.n	800242c <HAL_TIM_PWM_Start_IT+0x138>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <HAL_TIM_PWM_Start_IT+0xbc>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023e5 	.word	0x080023e5
 80023b4:	0800242d 	.word	0x0800242d
 80023b8:	0800242d 	.word	0x0800242d
 80023bc:	0800242d 	.word	0x0800242d
 80023c0:	080023f7 	.word	0x080023f7
 80023c4:	0800242d 	.word	0x0800242d
 80023c8:	0800242d 	.word	0x0800242d
 80023cc:	0800242d 	.word	0x0800242d
 80023d0:	08002409 	.word	0x08002409
 80023d4:	0800242d 	.word	0x0800242d
 80023d8:	0800242d 	.word	0x0800242d
 80023dc:	0800242d 	.word	0x0800242d
 80023e0:	0800241b 	.word	0x0800241b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0202 	orr.w	r2, r2, #2
 80023f2:	60da      	str	r2, [r3, #12]
      break;
 80023f4:	e01d      	b.n	8002432 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0204 	orr.w	r2, r2, #4
 8002404:	60da      	str	r2, [r3, #12]
      break;
 8002406:	e014      	b.n	8002432 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0208 	orr.w	r2, r2, #8
 8002416:	60da      	str	r2, [r3, #12]
      break;
 8002418:	e00b      	b.n	8002432 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0210 	orr.w	r2, r2, #16
 8002428:	60da      	str	r2, [r3, #12]
      break;
 800242a:	e002      	b.n	8002432 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
      break;
 8002430:	bf00      	nop
  }

  if (status == HAL_OK)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d141      	bne.n	80024bc <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2201      	movs	r2, #1
 800243e:	6839      	ldr	r1, [r7, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fc51 	bl	8002ce8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a1f      	ldr	r2, [pc, #124]	; (80024c8 <HAL_TIM_PWM_Start_IT+0x1d4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d107      	bne.n	8002460 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800245e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a18      	ldr	r2, [pc, #96]	; (80024c8 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00e      	beq.n	8002488 <HAL_TIM_PWM_Start_IT+0x194>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002472:	d009      	beq.n	8002488 <HAL_TIM_PWM_Start_IT+0x194>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a14      	ldr	r2, [pc, #80]	; (80024cc <HAL_TIM_PWM_Start_IT+0x1d8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d004      	beq.n	8002488 <HAL_TIM_PWM_Start_IT+0x194>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a13      	ldr	r2, [pc, #76]	; (80024d0 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d111      	bne.n	80024ac <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b06      	cmp	r3, #6
 8002498:	d010      	beq.n	80024bc <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024aa:	e007      	b.n	80024bc <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40012c00 	.word	0x40012c00
 80024cc:	40000400 	.word	0x40000400
 80024d0:	40000800 	.word	0x40000800

080024d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e0ae      	b.n	8002650 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b0c      	cmp	r3, #12
 80024fe:	f200 809f 	bhi.w	8002640 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002502:	a201      	add	r2, pc, #4	; (adr r2, 8002508 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002508:	0800253d 	.word	0x0800253d
 800250c:	08002641 	.word	0x08002641
 8002510:	08002641 	.word	0x08002641
 8002514:	08002641 	.word	0x08002641
 8002518:	0800257d 	.word	0x0800257d
 800251c:	08002641 	.word	0x08002641
 8002520:	08002641 	.word	0x08002641
 8002524:	08002641 	.word	0x08002641
 8002528:	080025bf 	.word	0x080025bf
 800252c:	08002641 	.word	0x08002641
 8002530:	08002641 	.word	0x08002641
 8002534:	08002641 	.word	0x08002641
 8002538:	080025ff 	.word	0x080025ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f9b2 	bl	80028ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0208 	orr.w	r2, r2, #8
 8002556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0204 	bic.w	r2, r2, #4
 8002566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6999      	ldr	r1, [r3, #24]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	619a      	str	r2, [r3, #24]
      break;
 800257a:	e064      	b.n	8002646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f9f8 	bl	8002978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699a      	ldr	r2, [r3, #24]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6999      	ldr	r1, [r3, #24]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	021a      	lsls	r2, r3, #8
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	619a      	str	r2, [r3, #24]
      break;
 80025bc:	e043      	b.n	8002646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fa41 	bl	8002a4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0208 	orr.w	r2, r2, #8
 80025d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69da      	ldr	r2, [r3, #28]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0204 	bic.w	r2, r2, #4
 80025e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69d9      	ldr	r1, [r3, #28]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	61da      	str	r2, [r3, #28]
      break;
 80025fc:	e023      	b.n	8002646 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fa8b 	bl	8002b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69d9      	ldr	r1, [r3, #28]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	021a      	lsls	r2, r3, #8
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	61da      	str	r2, [r3, #28]
      break;
 800263e:	e002      	b.n	8002646 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	75fb      	strb	r3, [r7, #23]
      break;
 8002644:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800264e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_TIM_ConfigClockSource+0x1c>
 8002670:	2302      	movs	r3, #2
 8002672:	e0b4      	b.n	80027de <HAL_TIM_ConfigClockSource+0x186>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800269a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ac:	d03e      	beq.n	800272c <HAL_TIM_ConfigClockSource+0xd4>
 80026ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b2:	f200 8087 	bhi.w	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ba:	f000 8086 	beq.w	80027ca <HAL_TIM_ConfigClockSource+0x172>
 80026be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c2:	d87f      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026c4:	2b70      	cmp	r3, #112	; 0x70
 80026c6:	d01a      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xa6>
 80026c8:	2b70      	cmp	r3, #112	; 0x70
 80026ca:	d87b      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026cc:	2b60      	cmp	r3, #96	; 0x60
 80026ce:	d050      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x11a>
 80026d0:	2b60      	cmp	r3, #96	; 0x60
 80026d2:	d877      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026d4:	2b50      	cmp	r3, #80	; 0x50
 80026d6:	d03c      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0xfa>
 80026d8:	2b50      	cmp	r3, #80	; 0x50
 80026da:	d873      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d058      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x13a>
 80026e0:	2b40      	cmp	r3, #64	; 0x40
 80026e2:	d86f      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026e4:	2b30      	cmp	r3, #48	; 0x30
 80026e6:	d064      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x15a>
 80026e8:	2b30      	cmp	r3, #48	; 0x30
 80026ea:	d86b      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d060      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x15a>
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d867      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d05c      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x15a>
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d05a      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x15a>
 80026fc:	e062      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f000 facc 	bl	8002caa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	609a      	str	r2, [r3, #8]
      break;
 800272a:	e04f      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f000 fab5 	bl	8002caa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800274e:	609a      	str	r2, [r3, #8]
      break;
 8002750:	e03c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	461a      	mov	r2, r3
 8002760:	f000 fa2c 	bl	8002bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2150      	movs	r1, #80	; 0x50
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fa83 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002770:	e02c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	461a      	mov	r2, r3
 8002780:	f000 fa4a 	bl	8002c18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2160      	movs	r1, #96	; 0x60
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fa73 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 8002790:	e01c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	461a      	mov	r2, r3
 80027a0:	f000 fa0c 	bl	8002bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2140      	movs	r1, #64	; 0x40
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fa63 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 80027b0:	e00c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f000 fa5a 	bl	8002c76 <TIM_ITRx_SetConfig>
      break;
 80027c2:	e003      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      break;
 80027c8:	e000      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a29      	ldr	r2, [pc, #164]	; (80028a0 <TIM_Base_SetConfig+0xb8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00b      	beq.n	8002818 <TIM_Base_SetConfig+0x30>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002806:	d007      	beq.n	8002818 <TIM_Base_SetConfig+0x30>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a26      	ldr	r2, [pc, #152]	; (80028a4 <TIM_Base_SetConfig+0xbc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d003      	beq.n	8002818 <TIM_Base_SetConfig+0x30>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <TIM_Base_SetConfig+0xc0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d108      	bne.n	800282a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <TIM_Base_SetConfig+0xb8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00b      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d007      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <TIM_Base_SetConfig+0xbc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d003      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <TIM_Base_SetConfig+0xc0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d108      	bne.n	800285c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <TIM_Base_SetConfig+0xb8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d103      	bne.n	8002890 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	615a      	str	r2, [r3, #20]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800

080028ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f023 0201 	bic.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f023 0302 	bic.w	r3, r3, #2
 80028f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <TIM_OC1_SetConfig+0xc8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d10c      	bne.n	8002922 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0308 	bic.w	r3, r3, #8
 800290e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f023 0304 	bic.w	r3, r3, #4
 8002920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a13      	ldr	r2, [pc, #76]	; (8002974 <TIM_OC1_SetConfig+0xc8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d111      	bne.n	800294e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	621a      	str	r2, [r3, #32]
}
 8002968:	bf00      	nop
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40012c00 	.word	0x40012c00

08002978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f023 0210 	bic.w	r2, r3, #16
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f023 0320 	bic.w	r3, r3, #32
 80029c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <TIM_OC2_SetConfig+0xd0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d10d      	bne.n	80029f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a14      	ldr	r2, [pc, #80]	; (8002a48 <TIM_OC2_SetConfig+0xd0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d113      	bne.n	8002a24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	621a      	str	r2, [r3, #32]
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	40012c00 	.word	0x40012c00

08002a4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <TIM_OC3_SetConfig+0xd0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10d      	bne.n	8002ac6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <TIM_OC3_SetConfig+0xd0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d113      	bne.n	8002af6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	621a      	str	r2, [r3, #32]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40012c00 	.word	0x40012c00

08002b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	031b      	lsls	r3, r3, #12
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	; (8002bb8 <TIM_OC4_SetConfig+0x98>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d109      	bne.n	8002b94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	019b      	lsls	r3, r3, #6
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	621a      	str	r2, [r3, #32]
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	40012c00 	.word	0x40012c00

08002bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f023 0201 	bic.w	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f023 030a 	bic.w	r3, r3, #10
 8002bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f023 0210 	bic.w	r2, r3, #16
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	031b      	lsls	r3, r3, #12
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	621a      	str	r2, [r3, #32]
}
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f043 0307 	orr.w	r3, r3, #7
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	609a      	str	r2, [r3, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b087      	sub	sp, #28
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	021a      	lsls	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	609a      	str	r2, [r3, #8]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1a      	ldr	r2, [r3, #32]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e046      	b.n	8002dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a16      	ldr	r2, [pc, #88]	; (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00e      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d94:	d009      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d004      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d10c      	bne.n	8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800

08002dec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e03d      	b.n	8002e84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e042      	b.n	8002f26 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7fd fd25 	bl	8000904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2224      	movs	r2, #36	; 0x24
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fcdc 	bl	8003890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ee6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ef6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d112      	bne.n	8002f6e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_UART_Receive_IT+0x26>
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e00b      	b.n	8002f70 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	461a      	mov	r2, r3
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 fabf 	bl	80034e8 <UART_Start_Receive_IT>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	e000      	b.n	8002f70 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
  }
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b0ba      	sub	sp, #232	; 0xe8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10f      	bne.n	8002fde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_UART_IRQHandler+0x66>
 8002fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fb9c 	bl	8003714 <UART_Receive_IT>
      return;
 8002fdc:	e25b      	b.n	8003496 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80de 	beq.w	80031a4 <HAL_UART_IRQHandler+0x22c>
 8002fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d106      	bne.n	8003002 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80d1 	beq.w	80031a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_UART_IRQHandler+0xae>
 800300e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_UART_IRQHandler+0xd2>
 8003032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f043 0202 	orr.w	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800304a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_UART_IRQHandler+0xf6>
 8003056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f043 0204 	orr.w	r2, r3, #4
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d011      	beq.n	800309e <HAL_UART_IRQHandler+0x126>
 800307a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d105      	bne.n	8003092 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f043 0208 	orr.w	r2, r3, #8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 81f2 	beq.w	800348c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_UART_IRQHandler+0x14e>
 80030b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fb27 	bl	8003714 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <HAL_UART_IRQHandler+0x17a>
 80030ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d04f      	beq.n	8003192 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fa31 	bl	800355a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d041      	beq.n	800318a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3314      	adds	r3, #20
 800310c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800311c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3314      	adds	r3, #20
 800312e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003132:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800313e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800314a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1d9      	bne.n	8003106 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d013      	beq.n	8003182 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	4a7e      	ldr	r2, [pc, #504]	; (8003358 <HAL_UART_IRQHandler+0x3e0>)
 8003160:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe f942 	bl	80013f0 <HAL_DMA_Abort_IT>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d016      	beq.n	80031a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800317c:	4610      	mov	r0, r2
 800317e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003180:	e00e      	b.n	80031a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f99c 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	e00a      	b.n	80031a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f998 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003190:	e006      	b.n	80031a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f994 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800319e:	e175      	b.n	800348c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	bf00      	nop
    return;
 80031a2:	e173      	b.n	800348c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	f040 814f 	bne.w	800344c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8148 	beq.w	800344c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8141 	beq.w	800344c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80b6 	beq.w	800335c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8145 	beq.w	8003490 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800320a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800320e:	429a      	cmp	r2, r3
 8003210:	f080 813e 	bcs.w	8003490 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800321a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	2b20      	cmp	r3, #32
 8003224:	f000 8088 	beq.w	8003338 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	330c      	adds	r3, #12
 800322e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003236:	e853 3f00 	ldrex	r3, [r3]
 800323a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800323e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003254:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003258:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003260:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003264:	e841 2300 	strex	r3, r2, [r1]
 8003268:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800326c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1d9      	bne.n	8003228 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3314      	adds	r3, #20
 800327a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800327e:	e853 3f00 	ldrex	r3, [r3]
 8003282:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3314      	adds	r3, #20
 8003294:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003298:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800329c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032a4:	e841 2300 	strex	r3, r2, [r1]
 80032a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e1      	bne.n	8003274 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3314      	adds	r3, #20
 80032b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032ba:	e853 3f00 	ldrex	r3, [r3]
 80032be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3314      	adds	r3, #20
 80032d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032dc:	e841 2300 	strex	r3, r2, [r1]
 80032e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e3      	bne.n	80032b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	330c      	adds	r3, #12
 80032fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003300:	e853 3f00 	ldrex	r3, [r3]
 8003304:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003308:	f023 0310 	bic.w	r3, r3, #16
 800330c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800331a:	65ba      	str	r2, [r7, #88]	; 0x58
 800331c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003320:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003322:	e841 2300 	strex	r3, r2, [r1]
 8003326:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1e3      	bne.n	80032f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe f821 	bl	800137a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003346:	b29b      	uxth	r3, r3
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	b29b      	uxth	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8bf 	bl	80034d2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003354:	e09c      	b.n	8003490 <HAL_UART_IRQHandler+0x518>
 8003356:	bf00      	nop
 8003358:	0800361f 	.word	0x0800361f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003364:	b29b      	uxth	r3, r3
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 808e 	beq.w	8003494 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8089 	beq.w	8003494 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	330c      	adds	r3, #12
 8003388:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003398:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033a6:	647a      	str	r2, [r7, #68]	; 0x44
 80033a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e3      	bne.n	8003382 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3314      	adds	r3, #20
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	623b      	str	r3, [r7, #32]
   return(result);
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3314      	adds	r3, #20
 80033da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033de:	633a      	str	r2, [r7, #48]	; 0x30
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e3      	bne.n	80033ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	e853 3f00 	ldrex	r3, [r3]
 800340e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0310 	bic.w	r3, r3, #16
 8003416:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	330c      	adds	r3, #12
 8003420:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003424:	61fa      	str	r2, [r7, #28]
 8003426:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003428:	69b9      	ldr	r1, [r7, #24]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	e841 2300 	strex	r3, r2, [r1]
 8003430:	617b      	str	r3, [r7, #20]
   return(result);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e3      	bne.n	8003400 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800343e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003442:	4619      	mov	r1, r3
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f844 	bl	80034d2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800344a:	e023      	b.n	8003494 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800344c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b00      	cmp	r3, #0
 8003456:	d009      	beq.n	800346c <HAL_UART_IRQHandler+0x4f4>
 8003458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f8ee 	bl	8003646 <UART_Transmit_IT>
    return;
 800346a:	e014      	b.n	8003496 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800346c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <HAL_UART_IRQHandler+0x51e>
 8003478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800347c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f92d 	bl	80036e4 <UART_EndTransmit_IT>
    return;
 800348a:	e004      	b.n	8003496 <HAL_UART_IRQHandler+0x51e>
    return;
 800348c:	bf00      	nop
 800348e:	e002      	b.n	8003496 <HAL_UART_IRQHandler+0x51e>
      return;
 8003490:	bf00      	nop
 8003492:	e000      	b.n	8003496 <HAL_UART_IRQHandler+0x51e>
      return;
 8003494:	bf00      	nop
  }
}
 8003496:	37e8      	adds	r7, #232	; 0xe8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	4613      	mov	r3, r2
 80034f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	88fa      	ldrh	r2, [r7, #6]
 8003500:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	88fa      	ldrh	r2, [r7, #6]
 8003506:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2222      	movs	r2, #34	; 0x22
 8003512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800352c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0220 	orr.w	r2, r2, #32
 800354c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800355a:	b480      	push	{r7}
 800355c:	b095      	sub	sp, #84	; 0x54
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	330c      	adds	r3, #12
 8003568:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356c:	e853 3f00 	ldrex	r3, [r3]
 8003570:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003578:	64fb      	str	r3, [r7, #76]	; 0x4c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	330c      	adds	r3, #12
 8003580:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003582:	643a      	str	r2, [r7, #64]	; 0x40
 8003584:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003586:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800358a:	e841 2300 	strex	r3, r2, [r1]
 800358e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1e5      	bne.n	8003562 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3314      	adds	r3, #20
 800359c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3314      	adds	r3, #20
 80035b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e5      	bne.n	8003596 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d119      	bne.n	8003606 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	330c      	adds	r3, #12
 80035d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	e853 3f00 	ldrex	r3, [r3]
 80035e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f023 0310 	bic.w	r3, r3, #16
 80035e8:	647b      	str	r3, [r7, #68]	; 0x44
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	330c      	adds	r3, #12
 80035f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035f2:	61ba      	str	r2, [r7, #24]
 80035f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	6979      	ldr	r1, [r7, #20]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e5      	bne.n	80035d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003614:	bf00      	nop
 8003616:	3754      	adds	r7, #84	; 0x54
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff ff41 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003646:	b480      	push	{r7}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b21      	cmp	r3, #33	; 0x21
 8003658:	d13e      	bne.n	80036d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003662:	d114      	bne.n	800368e <UART_Transmit_IT+0x48>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d110      	bne.n	800368e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003680:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	1c9a      	adds	r2, r3, #2
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	621a      	str	r2, [r3, #32]
 800368c:	e008      	b.n	80036a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	1c59      	adds	r1, r3, #1
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6211      	str	r1, [r2, #32]
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	4619      	mov	r1, r3
 80036ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10f      	bne.n	80036d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e000      	b.n	80036da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036d8:	2302      	movs	r3, #2
  }
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff fec9 	bl	800349c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08c      	sub	sp, #48	; 0x30
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b22      	cmp	r3, #34	; 0x22
 8003726:	f040 80ae 	bne.w	8003886 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003732:	d117      	bne.n	8003764 <UART_Receive_IT+0x50>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d113      	bne.n	8003764 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003752:	b29a      	uxth	r2, r3
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	1c9a      	adds	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	629a      	str	r2, [r3, #40]	; 0x28
 8003762:	e026      	b.n	80037b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800376a:	2300      	movs	r3, #0
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003776:	d007      	beq.n	8003788 <UART_Receive_IT+0x74>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <UART_Receive_IT+0x82>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	b2da      	uxtb	r2, r3
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	e008      	b.n	80037a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4619      	mov	r1, r3
 80037c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d15d      	bne.n	8003882 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0220 	bic.w	r2, r2, #32
 80037d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	2b01      	cmp	r3, #1
 800380a:	d135      	bne.n	8003878 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	330c      	adds	r3, #12
 8003818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	613b      	str	r3, [r7, #16]
   return(result);
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f023 0310 	bic.w	r3, r3, #16
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003832:	623a      	str	r2, [r7, #32]
 8003834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	6a3a      	ldr	r2, [r7, #32]
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e5      	bne.n	8003812 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b10      	cmp	r3, #16
 8003852:	d10a      	bne.n	800386a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800386e:	4619      	mov	r1, r3
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff fe2e 	bl	80034d2 <HAL_UARTEx_RxEventCallback>
 8003876:	e002      	b.n	800387e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff fe18 	bl	80034ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	e002      	b.n	8003888 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	e000      	b.n	8003888 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	3730      	adds	r7, #48	; 0x30
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038ca:	f023 030c 	bic.w	r3, r3, #12
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2c      	ldr	r2, [pc, #176]	; (80039a4 <UART_SetConfig+0x114>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038f8:	f7fe fb6c 	bl	8001fd4 <HAL_RCC_GetPCLK2Freq>
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	e002      	b.n	8003906 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003900:	f7fe fb54 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 8003904:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	009a      	lsls	r2, r3, #2
 8003910:	441a      	add	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <UART_SetConfig+0x118>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	0119      	lsls	r1, r3, #4
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	009a      	lsls	r2, r3, #2
 8003930:	441a      	add	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	fbb2 f2f3 	udiv	r2, r2, r3
 800393c:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <UART_SetConfig+0x118>)
 800393e:	fba3 0302 	umull	r0, r3, r3, r2
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	2064      	movs	r0, #100	; 0x64
 8003946:	fb00 f303 	mul.w	r3, r0, r3
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	3332      	adds	r3, #50	; 0x32
 8003950:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <UART_SetConfig+0x118>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800395c:	4419      	add	r1, r3
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009a      	lsls	r2, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	fbb2 f2f3 	udiv	r2, r2, r3
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <UART_SetConfig+0x118>)
 8003976:	fba3 0302 	umull	r0, r3, r3, r2
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2064      	movs	r0, #100	; 0x64
 800397e:	fb00 f303 	mul.w	r3, r0, r3
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	3332      	adds	r3, #50	; 0x32
 8003988:	4a07      	ldr	r2, [pc, #28]	; (80039a8 <UART_SetConfig+0x118>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	f003 020f 	and.w	r2, r3, #15
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	440a      	add	r2, r1
 800399a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40013800 	.word	0x40013800
 80039a8:	51eb851f 	.word	0x51eb851f

080039ac <__libc_init_array>:
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	2600      	movs	r6, #0
 80039b0:	4d0c      	ldr	r5, [pc, #48]	; (80039e4 <__libc_init_array+0x38>)
 80039b2:	4c0d      	ldr	r4, [pc, #52]	; (80039e8 <__libc_init_array+0x3c>)
 80039b4:	1b64      	subs	r4, r4, r5
 80039b6:	10a4      	asrs	r4, r4, #2
 80039b8:	42a6      	cmp	r6, r4
 80039ba:	d109      	bne.n	80039d0 <__libc_init_array+0x24>
 80039bc:	f000 f822 	bl	8003a04 <_init>
 80039c0:	2600      	movs	r6, #0
 80039c2:	4d0a      	ldr	r5, [pc, #40]	; (80039ec <__libc_init_array+0x40>)
 80039c4:	4c0a      	ldr	r4, [pc, #40]	; (80039f0 <__libc_init_array+0x44>)
 80039c6:	1b64      	subs	r4, r4, r5
 80039c8:	10a4      	asrs	r4, r4, #2
 80039ca:	42a6      	cmp	r6, r4
 80039cc:	d105      	bne.n	80039da <__libc_init_array+0x2e>
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d4:	4798      	blx	r3
 80039d6:	3601      	adds	r6, #1
 80039d8:	e7ee      	b.n	80039b8 <__libc_init_array+0xc>
 80039da:	f855 3b04 	ldr.w	r3, [r5], #4
 80039de:	4798      	blx	r3
 80039e0:	3601      	adds	r6, #1
 80039e2:	e7f2      	b.n	80039ca <__libc_init_array+0x1e>
 80039e4:	08003a48 	.word	0x08003a48
 80039e8:	08003a48 	.word	0x08003a48
 80039ec:	08003a48 	.word	0x08003a48
 80039f0:	08003a4c 	.word	0x08003a4c

080039f4 <memset>:
 80039f4:	4603      	mov	r3, r0
 80039f6:	4402      	add	r2, r0
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d100      	bne.n	80039fe <memset+0xa>
 80039fc:	4770      	bx	lr
 80039fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003a02:	e7f9      	b.n	80039f8 <memset+0x4>

08003a04 <_init>:
 8003a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a06:	bf00      	nop
 8003a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a0a:	bc08      	pop	{r3}
 8003a0c:	469e      	mov	lr, r3
 8003a0e:	4770      	bx	lr

08003a10 <_fini>:
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a12:	bf00      	nop
 8003a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a16:	bc08      	pop	{r3}
 8003a18:	469e      	mov	lr, r3
 8003a1a:	4770      	bx	lr
